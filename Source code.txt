	#include<stdio.h>
	#include<stdlib.h>
	#include<iostream>
	#include<string.h>
	#include<vector>
	#include<algorithm>
	#include<iomanip>
	using namespace std;
	typedef struct NODE
	{
	    int key;	
	    int count;
	    int num;
	    char name[200];
	    struct NODE *left;
	    struct NODE *right;
	    int height;
	}NODE;
    int max(int a, int b);
	void displaycount(vector<NODE*> &g,int);
	void inordercount(NODE* root);
	int height(NODE *N)
	{
	    if (N == NULL)
	        return 0;
	    return N->height;
	}
	
	 int max(int a, int b)
	{
	    return (a > b)? a : b;
	}
	NODE* newNode(int num1,int key,char n1[200],int c)
	{
	    NODE* node = (NODE*) malloc(sizeof(NODE));
	    node->key   = key;
	    node->num=num1;
	    node->count=c;
	    strcpy(node->name,n1);
	    node->left   = NULL;
	    node->right  = NULL;
	    node->height = 1;  
	    return(node);
	}
    NODE *rightRotate(NODE *y)
	{
	    NODE *x = y->left;
	    NODE *T2 = x->right;
	    x->right = y;
	    y->left = T2;
	    y->height = max(height(y->left), height(y->right))+1;
	    x->height = max(height(x->left), height(x->right))+1;
	   return x;
	}
	NODE *leftRotate(NODE *x)
	{   NODE *y = x->right;
	    NODE *T2 = y->left;
	    y->left = x;
	    x->right = T2;
	    x->height = max(height(x->left), height(x->right))+1;
	    y->height = max(height(y->left), height(y->right))+1;
	    return y;
	}
	int getBalance(NODE *N)
	{  if (N == NULL)
	        return 0;
	    return height(N->left) - height(N->right);
	}
	NODE* insert( int nu,NODE* node, int key,char n[200],int cou)
	{  if (node == NULL)
	    return(newNode(nu,key,n,cou));
	  if (key < node->key)
	        node->left  = insert(nu,node->left, key,n,cou);
	    else if (key > node->key)
	        node->right = insert(nu,node->right, key,n,cou);
	    else 
	        return node;
	    node->height = 1 + max(height(node->left), height(node->right));
	    int balance = getBalance(node);
	    if (balance > 1 && key < node->left->key)
	        return rightRotate(node);
	
	    if (balance < -1 && key > node->right->key)
	        return leftRotate(node);
	    if (balance > 1 && key > node->left->key)
	    {
	        node->left =  leftRotate(node->left);
	        return rightRotate(node);
	    }
	   if (balance < -1 && key < node->right->key)
	    {
	        node->right = rightRotate(node->right);
	        return leftRotate(node);
	    }
	 return node;
	}
	void inOrder(NODE *root)
	{ 
	    if(root != NULL)
	    {
	         inOrder(root->left);
	         cout<<"\n\n"<<root->num<<".\t\nGADGET NAME: "<< root->name;
	         cout<<"\t\nPRICE: "<<root->key;
	         cout<<"\t\nAVALAIBLE PIECES: "<<root->count;
	        inOrder(root->right);
	         }
	}
	NODE *rightRotatesplay(NODE *x)
	{
	    NODE *y = x->left;
	    x->left = y->right;
	    y->right = x;
	    return y;  
	}
	NODE *leftRotatesplay(NODE *x)
	{
	    NODE *y = x->right;
	    x->right = y->left;
	    y->left = x;
	    return y;
	}
	NODE *splay(NODE *root, int key)
	{
	    if (root == NULL || root->key == key)
	        return root;
	    if (root->key > key)
	    {
	        if (root->left == NULL) return root;
	         if (root->left->key > key)
	        {
	            root->left->left = splay(root->left->left, key);
	            root = rightRotatesplay(root);
	        }
            else if (root->left->key < key) 
	        {
	           root->left->right = splay(root->left->right, key);
	          if (root->left->right != NULL)
	                root->left = leftRotatesplay(root->left);
	        }
	    return (root->left == NULL)? root: rightRotatesplay(root);
	    }
	    else 
	    {
	        if (root->right == NULL) return root;
	        if (root->right->key > key)
	        {
	            root->right->left = splay(root->right->left, key);
	            if (root->right->left != NULL)
	                root->right = rightRotate(root->right);
	        }
	        else if (root->right->key < key)
	        {
	            root->right->right = splay(root->right->right, key);
	            root = leftRotate(root);
	        }
	   return (root->right == NULL)? root: leftRotate(root);
	    }
	}
	
	void search(NODE* root,int start)
	{ 
	NODE* node=NULL;
		if (root!=NULL) 
		{
	       if(root->key==start)
		    {
			  inOrder(root); 
			}
		    else 
			{
	            if(start<root->key)
				{
				    node=splay(root,start);
				     if(start==node->key){
				       inOrder(node); }
			         else{
			           inOrder(node->right);  }
		        }
			    else
				{
	             search(root->right,start);
			    }
	       }
		}
	}
	void display(vector<NODE*> &g,int i)
	{ 
	 inOrder(g[i]);  
	}
	void traverse(NODE* root,int ch,int cn)
	{  
	NODE* node=NULL; 
	if(root!=NULL)	
	{
		if(root->num==ch) 
		{
	        root->count-=cn;
	    }
		else
		{
	      if(ch<root->num) 
		  {
		    node=	splay(root,ch);
		    if(ch==node->num) 
			{
		       node->count-=cn;
	        } 
	      }
		}
	}
	}
	void displaycount(vector<NODE*> &g,int i) 
	{  
	  inordercount(g[i]); 
	}
	void inordercount(NODE* root)
	{  
	  if(root!=NULL)
	  {          
	      inordercount(root->left);
		  cout<<"\n\nGADGET NAME: "<<root->name<<" ("<<root->count<<")";
		  inordercount(root->right);
		}    
	}
	 
	int main()
	{
	  NODE *root = NULL;
	  NODE *groot=NULL;
	  NODE *kroot=NULL;
	  NODE *lroot=NULL;
	  NODE *mroot=NULL;
	  NODE *nroot=NULL;
	  NODE *oroot=NULL;  
	
	  root = insert(3,root, 2770,"Fitness_trackers",8);
	  root = insert(1,root, 345,"Smart_glasses",6);
	  root = insert(5,root, 4000,"Streaming_Media_players",5);
	  root = insert(4,root, 3500,"Wearable Cameras",6);
	  root = insert(6,root, 38900,"Robotic_vaccum_cleaner",6);
	  root = insert(2,root, 1999,"MP3_players",5);
	  
	  groot = insert(1,groot,2770 ,"Misfit_ray",10);
	  groot = insert(2,groot,4560,"Moov_now",7);
	  groot = insert(4,groot,8547,"FitBit_Alta_hr",8);
	  groot = insert(3,groot,8470,"Fitbit_charge2",15);
	  groot = insert(5,groot,7623,"garmin_vivosmart_3",12);
	  groot = insert(6,groot,17094,"Garmin_forerunner_235",14);  
	  groot = insert(7,groot,23023,"Fitbit_ionic",16);
	  groot = insert(8,groot,33033,"Apple_Watch_series_3",10);
	  
	  kroot = insert(2,kroot, 499,"Ant_Vr",10);
	  kroot = insert(6,kroot,3999 ,"google_daydream_vr_headset",14);
	  kroot = insert(3,kroot, 999,"MTT_3D_vr_glass_headset",15);
	  kroot = insert(1,kroot,345 ,"3D_Plastic_Vr_headset",12);
	  kroot = insert(4,kroot, 1999,"Adjustable_Vr_headset",9);
	  kroot = insert(5,kroot,2099 ,"irusu_MONSTERVR_Vr_headset",8);
	  
	  lroot=insert(2,lroot,3500 ,"contour+2",16);
	  lroot=insert(3,lroot,4700 ,"Garmin_VIRB",13);
	  lroot=insert(6,lroot,43997 ,"Gopro_Hero",10);
	  lroot=insert(1,lroot,2900 ,"Intex_wifi_hd_camera",7);
	  lroot=insert(4,lroot,5645,"sony_pov",8);
	  lroot=insert(5,lroot,6000 ,"Mecam_HD",9);
	  
	  mroot=insert(5,mroot,49900 ,"irobot_900_series_roomba(black)",10);
	  mroot=insert(1,mroot,38900 ,"irobot_600_series_roomba(black)",9);
	  mroot=insert(3,mroot,42900 ,"irobot_700_series_roomba(black)",8);
	  mroot=insert(6,mroot, 49950,"irobot_900_series_roomba(grey)",14);
	  mroot=insert(2,mroot, 38950,"irobot_600_series_roomba(grey)",12);
	  mroot=insert(4,mroot,42950 ,"irobot_700_series_roomba(grey)",13);
	  
	  nroot=insert(2,nroot,4550 ,"amazon_fireTV",11);
	  nroot=insert(4,nroot,11635 ,"appleTV_4K",10);
	  nroot=insert(5,nroot,13000 ,"NVIDIA_shield_tv",9);
	  nroot=insert(3,nroot,5000 ,"Roku_streaming_stick",13);
	  nroot=insert(1,nroot, 4000,"google_chromecast_ultra",12);
	  
	  oroot=insert(4,oroot,3999 ,"apple_ipod",10);
	  oroot=insert(1,oroot,1999 ,"philips_mp3_player",14);
	  oroot=insert(5,oroot,8798 ,"sony_walkman",12);
	  oroot=insert(2,oroot,3490 ,"transcend_mp3_player",15);
	  oroot=insert(3,oroot,3899,"fiio_fiio_mp3_player",11);
	        
	  vector<NODE*> g;
	  vector<NODE*>::iterator it;
	  g.push_back(kroot);
	  g.push_back(oroot);
	  g.push_back(groot);
	  g.push_back(lroot);
	  g.push_back(nroot);
	  g.push_back(mroot);
	  int choice1,choice2,choice3,choice4,strpri,strpri1,i=1,j=1;
	 
	cout<<"\nWELCOME TO GADGETS SHOPPING CART";
	 while(j)
	 {
	 cout<<"\nEnter your position\n1.Customer\n2.Admin\n3.Exit";
	 cin>>choice1;
	 int i=1;
	 switch(choice1)
	 {
	 case 1:
	 	while(i)
	 	{
	 		g.begin();
	    cout<<"\nEnter your choice\n1.Display all gadgets irrespective of starting price\n2.Display gadgets based on starting price\n3.exit";
	    cin>>choice2;
	    switch(choice2)
	    {
	    	case 1: if (root == NULL)
	            {
	                cout<<"Tree is Empty"<<endl;
	            }
	            cout<<"Gadgets"<<endl;
	            inOrder(root);
	            break;
	        case 2:
	        	cout<<"\nEnter starting price";
	        	cin>>strpri;
	        	search(root,strpri);
	        	break;
	        default:
	        	cout<<"nEnter valid choice";
		}
		cout<<"\nEnter which gadget to be shown";
		cin>>choice3;
		cout<<"\ndo you want add starting price";
		cin>>choice4;
		if(choice4==0)
		{
		display(g,choice3-1);
	    }
	    else
	    {
		cout<<"\nEnter starting price";
		cin>>strpri1;
		for(it=g.begin();it!=g.end();++it)
		{
			if(*it == g[choice3-1])
			{
			search(g.at(choice3-1),strpri1);
		    }
	    }
	
	    }
	    cout<<"\n\nWhich Gadget to be placed in order?";
	    int choice5,cnt;
	    cin>>choice5;
	    if(choice5!=0)
	    {
		cout<<"\nHow many";
		cin>>cnt;
		traverse(g.at(choice3-1),choice5,cnt);
	    }
	    cout<<"\nWanna continue?";
	    cin>>i;
	}
	    break;
	    case 2:
	    	cout<<"\nWelcome back Admin\nTrack NO of gadgets in each model";
	    	for(int i=0;i<6;i++)
	    	{
	    	displaycount(g,i);
	        }
	    	break;
	    case 3:
	    	cout<<"\nEnter valid choice";
	}
	cout<<"\nWanna Continue?";
	cin>>j;
	}
	  return 0;
	}
	
		